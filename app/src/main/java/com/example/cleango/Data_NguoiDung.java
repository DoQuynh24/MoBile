package com.example.cleango;import android.content.ContentValues;import android.content.Context;import android.database.Cursor;import android.database.sqlite.SQLiteDatabase;import android.database.sqlite.SQLiteOpenHelper;import android.util.Log;public class Data_NguoiDung extends SQLiteOpenHelper {    private static final String DATABASE_NAME = "NguoiDung.db";    private static final int DATABASE_VERSION = 1;    private static final String TABLE_NGUOIDUNG = "NguoiDung";    private static final String COLUMN_ID = "MaNguoiDung";    private static final String COLUMN_USERNAME = "TaiKhoan";    private static final String COLUMN_PASSWORD = "MatKhau";    private static final String COLUMN_FULLNAME = "HoTen";    private static final String COLUMN_ADDRESS = "DiaChi";    private static final String COLUMN_AVATAR = "Avatar";    private static final String COLUMN_ROLE = "Role";    public Data_NguoiDung(Context context) {        super(context, DATABASE_NAME, null, DATABASE_VERSION);    }    @Override    public void onCreate(SQLiteDatabase db) {        String createTable = "CREATE TABLE " + TABLE_NGUOIDUNG + " ("                + COLUMN_ID + " INTEGER PRIMARY KEY AUTOINCREMENT, "                + COLUMN_USERNAME + " TEXT UNIQUE NOT NULL, "                + COLUMN_PASSWORD + " TEXT NOT NULL, "                + COLUMN_FULLNAME + " TEXT NOT NULL, "                + COLUMN_ADDRESS + " TEXT DEFAULT 'Chưa cập nhật', "                + COLUMN_AVATAR + " TEXT, "                + COLUMN_ROLE + " TEXT CHECK (" + COLUMN_ROLE + " IN ('Thành viên', 'Cộng tác viên')) NOT NULL)";        db.execSQL(createTable);        addDefaultAccounts(db);    }    @Override    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {        if (oldVersion < 2) {  // Phiên bản nâng cấp từ phiên bản 1 lên 2            // Thêm logic để cập nhật bảng            db.execSQL("CREATE TABLE IF NOT EXISTS TempTable AS SELECT * FROM " + TABLE_NGUOIDUNG);            db.execSQL("DROP TABLE IF EXISTS " + TABLE_NGUOIDUNG);            String createTable = "CREATE TABLE " + TABLE_NGUOIDUNG + " ("                    + COLUMN_ID + " INTEGER PRIMARY KEY AUTOINCREMENT, "                    + COLUMN_USERNAME + " TEXT UNIQUE NOT NULL, "                    + COLUMN_PASSWORD + " TEXT NOT NULL, "                    + COLUMN_FULLNAME + " TEXT NOT NULL, "                    + COLUMN_ADDRESS + " TEXT DEFAULT 'Chưa cập nhật', "                    + COLUMN_AVATAR + " TEXT, "  // Để Avatar có thể NULL                    + COLUMN_ROLE + " TEXT CHECK (" + COLUMN_ROLE + " IN ('Thành viên', 'Cộng tác viên')) NOT NULL)";            db.execSQL(createTable);            // Chuyển dữ liệu từ bảng cũ sang bảng mới            db.execSQL("INSERT INTO " + TABLE_NGUOIDUNG + " SELECT * FROM TempTable");            // Xóa bảng tạm            db.execSQL("DROP TABLE IF EXISTS TempTable");        }    }    private void addDefaultAccounts(SQLiteDatabase db) {        ContentValues adminValues = new ContentValues();        adminValues.put(COLUMN_USERNAME, "0364554001");        adminValues.put(COLUMN_PASSWORD, "123");        adminValues.put(COLUMN_FULLNAME, "Quỳnh Đỗ");        adminValues.put(COLUMN_ADDRESS, "Chưa cập nhật");        adminValues.put(COLUMN_AVATAR, "default_avatar.png");        adminValues.put(COLUMN_ROLE, "Thành viên");        db.insert(TABLE_NGUOIDUNG, null, adminValues);    }    public boolean registerUser(String taiKhoan, String matKhau, String hoTen, String vaiTro) {        SQLiteDatabase db = this.getWritableDatabase();        ContentValues values = new ContentValues();        if (taiKhoan == null || matKhau == null || hoTen == null || vaiTro == null) {            Log.e("Data_NguoiDung", "Thông tin đăng ký không hợp lệ: " +                    "TaiKhoan: " + taiKhoan + ", MatKhau: " + matKhau + ", HoTen: " + hoTen + ", VaiTro: " + vaiTro);            return false;  // Trả về false nếu có trường null        }        values.put(COLUMN_USERNAME, taiKhoan);        values.put(COLUMN_PASSWORD, matKhau);        values.put(COLUMN_FULLNAME, hoTen);        values.put(COLUMN_ROLE, vaiTro);        // Nếu không có avatar, sử dụng giá trị mặc định        values.put(COLUMN_AVATAR, "default_logo.png");        long result = db.insert(TABLE_NGUOIDUNG, null, values);        if (result == -1) {            Log.e("Data_NguoiDung", "Đăng ký người dùng thất bại: " + taiKhoan);            return false;  // Kiểm tra nếu việc thêm vào CSDL thất bại        }        Log.i("Data_NguoiDung", "Đăng ký người dùng thành công. TaiKhoan: " + taiKhoan + ", MatKhau: " + matKhau + ", HoTen: " + hoTen + ", Role: " + vaiTro);        return true;    }    public boolean isUserExists(String taiKhoan) {        SQLiteDatabase db = this.getReadableDatabase();        Cursor cursor = db.query(TABLE_NGUOIDUNG,                new String[]{COLUMN_ID},                COLUMN_USERNAME + "=?",                new String[]{taiKhoan},                null,                null,                null);        boolean exists = cursor.moveToFirst();        cursor.close();        return exists;    }    public String login(String taiKhoan, String matKhau) {        SQLiteDatabase db = this.getReadableDatabase();        Cursor cursor = null;        String vaiTro = null;        try {            cursor = db.query(TABLE_NGUOIDUNG, new String[] {COLUMN_USERNAME, COLUMN_PASSWORD, COLUMN_ROLE},                    COLUMN_USERNAME + "=? AND " + COLUMN_PASSWORD + "=?", new String[] {taiKhoan, matKhau},                    null, null, null);            if (cursor != null && cursor.moveToFirst()) {                int roleIndex = cursor.getColumnIndex(COLUMN_ROLE);                if (roleIndex >= 0) {                    vaiTro = cursor.getString(roleIndex);                } else {                    Log.e("Login", "Không tìm thấy cột vai trò!");                }            }        } catch (Exception e) {            Log.e("Login", "Lỗi đăng nhập: " + e.getMessage());        } finally {            if (cursor != null) {                cursor.close();            }        }        return vaiTro;    }    public String getUserRole(String taiKhoan) {        SQLiteDatabase db = this.getReadableDatabase();        Cursor cursor = db.query(TABLE_NGUOIDUNG,                new String[]{COLUMN_ROLE},                COLUMN_USERNAME + "=?",                new String[]{taiKhoan},                null,                null,                null);        if (cursor.moveToFirst()) {            String role = cursor.getString(0);            cursor.close();            return role;        }        cursor.close();        return null;    }    public Cursor getAllUsers() {        SQLiteDatabase db = this.getReadableDatabase();        return db.rawQuery("SELECT * FROM " + TABLE_NGUOIDUNG, null);    }    public boolean updateUser(int userId, String newUsername, String newPassword, String newFullname, String newAddress, String newAvatar, String newRole) {        SQLiteDatabase db = this.getWritableDatabase();        ContentValues values = new ContentValues();        values.put(COLUMN_USERNAME, newUsername);        values.put(COLUMN_PASSWORD, newPassword);        values.put(COLUMN_FULLNAME, newFullname);        values.put(COLUMN_ADDRESS, newAddress != null ? newAddress : "Chưa cập nhật");        values.put(COLUMN_AVATAR, newAvatar);        if (newRole == null || newRole.isEmpty() || (!newRole.equals("Thành viên") && !newRole.equals("Cộng tác viên"))) {            return false; // Không cập nhật nếu vai trò không hợp lệ        }        values.put(COLUMN_ROLE, newRole);        int rowsAffected = db.update(TABLE_NGUOIDUNG, values, COLUMN_ID + "=?", new String[]{String.valueOf(userId)});        return rowsAffected > 0;    }    public boolean deleteUser(int userId) {        SQLiteDatabase db = this.getWritableDatabase();        int rowsDeleted = db.delete(TABLE_NGUOIDUNG, COLUMN_ID + "=?", new String[]{String.valueOf(userId)});        return rowsDeleted > 0;    }}